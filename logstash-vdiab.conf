input {
  file {
    type => "syslog"

    # Read syslog and import old logs if necessary
    path => [ "/var/log/messages", "/var/log/messages-*" ]
    
    #start position can be removed if not importing old logs
    start_position => "beginning"
    sincedb_path => "/opt/logstash/sincedb-access"
  }
}


#VDIaB timestamp field. This is different than the syslog time value that is reported
filter {
grok {
match => { "message" => "timestamp=%{DATESTAMP_OTHER:timestamp}" }
}

#VDIaB server is reporting timestamp as PDT when timezone is actually EST. 
#This will incorrectly skew time so we are hacking around this rather than changing the citrix server implementation
#This can be adjusted to reflect whatever timezone is necessary
mutate {
gsub => ["timestamp", "PDT", "EST"]
}

#We are overwriting the @timestamp value to reflect the VDIaB reported time.
#This will also assign the proper time to messages when importing old logs.
date {
match => ["timestamp", "EEE MMM dd HH:mm:ss zzz YYYY"]
timezone => "EST"
target => "@timestamp"
}

#Gather username, desktop IP, and server from VDIaB login
grok {
match => { "message" => "Logged in user %{DATA:vdiuser} on desktop %{IPV4:VDI_IP} provisioned from template MISY 160 on vdiServer %{IPV4:VDI_server}" }
add_tag => [ "vdilogin" ]
}

#Gather username and IP on VDIaB logout
grok {
match => { "message" => "User %{DATA:vdiuser} logged out of %{IPV4:VDI_IP}" }
add_tag => [ "vdilogout" ]
}

#Authentication is against AD and users can login with or without @domain.com suffix. We will strip that out to standardize results
mutate {
gsub => ["vdiuser", "@domain.com", ""]
}


#Borrowed and edited code from yogi183 to generate timestamp for ppi-ag/kibana-heatmap
#Code adjusted to take in account -4 timezone conversion.
ruby {
    code => '
        require "time"

        #make timezone adjustment
        d = (event["@timestamp"]-4*60*60)
        d = d.to_s
        event["heatmap"] = Time.parse(d).strftime "%u-" + (Time.parse(d).strftime "%a") + (Time.parse(d).strftime ":%H-") + ((Time.parse(d) + 60*60).strftime "%H");
        '
    }
}

#Send the data to elasticsearch host
output {
 elasticsearch { host => "10.10.10.10" }

}